"use strict";(self.webpackChunkdocu_tutorial=self.webpackChunkdocu_tutorial||[]).push([[20],{9523:function(e){e.exports=JSON.parse('{"name":"Data Structures","permalink":"/notes/tags/data-structures","docs":[{"id":"programming/kotlin/collection-interfaces","title":"collection interfaces","description":"The Kotlin Standard Library has a set of interfaces that help define what\u2019s expected of a particular type. Each of these interfaces provides certain guarantees on characteristics and performance. Of these set of interfaces, four are referred to as collection interfaces.","permalink":"/notes/programming/kotlin/collection-interfaces"},{"id":"programming/data structures/complexity","title":"complexity","description":"How well will it scale?","permalink":"/notes/programming/data structures/complexity"},{"id":"programming/data structures/linked-list","title":"linked list","description":"A linked list is a collection of values arranged in a linear, unidirectional sequence. A linked list has several theoretical advantages over contiguous storage options such as the Kotlin Array or ArrayList:","permalink":"/notes/programming/data structures/linked-list"},{"id":"programming/data structures/list-performance","title":"list performance","description":"Aside from being a random-access collection, there are other areas of performance that are of interest on how well or poorly does the data structure fare when the amount of data it contains needs to grow. For lists, this varies on two factors.","permalink":"/notes/programming/data structures/list-performance"}],"allTagsPath":"/notes/tags"}')}}]);