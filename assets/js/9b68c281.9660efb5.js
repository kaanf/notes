"use strict";(self.webpackChunkdocu_tutorial=self.webpackChunkdocu_tutorial||[]).push([[421],{3905:function(e,t,n){n.d(t,{Zo:function(){return m},kt:function(){return f}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var u=a.createContext({}),s=function(e){var t=a.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},m=function(e){var t=s(e.components);return a.createElement(u.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,u=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),c=s(n),f=r,d=c["".concat(u,".").concat(f)]||c[f]||p[f]||i;return n?a.createElement(d,o(o({ref:t},m),{},{components:n})):a.createElement(d,o({ref:t},m))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=c;var l={};for(var u in t)hasOwnProperty.call(t,u)&&(l[u]=t[u]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var s=2;s<i;s++)o[s]=n[s];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},8537:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return u},metadata:function(){return s},toc:function(){return m},default:function(){return c}});var a=n(7462),r=n(3366),i=(n(7294),n(3905)),o=["components"],l={author:"kaanf",authorTitle:"Android Developer",authorURL:"https://github.com/kaanf",authorImageURL:"https://github.com/kaanf.png",tags:["Basics","Kotlin","Programming"]},u="mutable vs. immutable",s={unversionedId:"programming/kotlin/mutable-vs-immutable",id:"programming/kotlin/mutable-vs-immutable",isDocsHomePage:!1,title:"mutable vs. immutable",description:"There\u2019s a distinction between mutable and immutable data structures in Kotlin.",source:"@site/notes/programming/kotlin/mutable-vs-immutable.md",sourceDirName:"programming/kotlin",slug:"/programming/kotlin/mutable-vs-immutable",permalink:"/notes/programming/kotlin/mutable-vs-immutable",editUrl:"https://github.com/kaanf/personal-notes/edit/main/website/notes/programming/kotlin/mutable-vs-immutable.md",tags:[{label:"Basics",permalink:"/notes/tags/basics"},{label:"Kotlin",permalink:"/notes/tags/kotlin"},{label:"Programming",permalink:"/notes/tags/programming"}],version:"current",lastUpdatedBy:"kaanf",lastUpdatedAt:1633651110,formattedLastUpdatedAt:"10/8/2021",frontMatter:{author:"kaanf",authorTitle:"Android Developer",authorURL:"https://github.com/kaanf",authorImageURL:"https://github.com/kaanf.png",tags:["Basics","Kotlin","Programming"]},sidebar:"tutorialSidebar",previous:{title:"map",permalink:"/notes/programming/kotlin/map"}},m=[],p={toc:m};function c(e){var t=e.components,n=(0,r.Z)(e,o);return(0,i.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"mutable-vs-immutable"},"mutable vs. immutable"),(0,i.kt)("p",null,"There\u2019s a distinction between mutable and immutable data structures in Kotlin. "),(0,i.kt)("p",null,"When referring to the concept of a ",(0,i.kt)("inlineCode",{parentName:"p"},"List"),", it\u2019s usually referring to the Kotlin\u2019s ",(0,i.kt)("inlineCode",{parentName:"p"},"MutableList"),". Unlike ",(0,i.kt)("inlineCode",{parentName:"p"},"List"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"MutableList")," also has functions for adding and removing elements. Kotlin doesn\u2019t allow a ",(0,i.kt)("inlineCode",{parentName:"p"},"List")," to be changed in any way. "),(0,i.kt)("p",null,"To change a data structure, you must express this intent by using the ",(0,i.kt)("inlineCode",{parentName:"p"},"Mutable version")," of that data structure. These data structures have functions for adding and removing elements. "),(0,i.kt)("p",null,"So why would you ever use the immutable version? ",(0,i.kt)("strong",{parentName:"p"},"For safety. ")),(0,i.kt)("p",null,"Whenever you need to pass your data structure as a parameter, and you want to be sure that the function doesn\u2019t produce a side effect, you should use an immutable collection as the parameter."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},'fun noSideEffectList(names: List<String>) {\n println(names)\n}\nfun sideEffectList(names: MutableList<String>) {\n names.add("Cem")\n}\nfun mutableVsImmutable() {\n val people = mutableListOf("Kaan", "F\u0131rat", "\u0130lknur")\n noSideEffectList(people) // [Kaan, F\u0131rat, \u0130lknur]\n sideEffectList(people) // Adds Cem to the list\n noSideEffectList(people) // [Kaan, F\u0131rat, \u0130lknur, Cem]\n}\n')),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"sideEffectList")," function adds a ",(0,i.kt)("em",{parentName:"p"},"Cem")," to it. These kind of side-effects are usually the ones generating bugs. Avoiding them by using a ",(0,i.kt)("inlineCode",{parentName:"p"},"List")," instead of a ",(0,i.kt)("inlineCode",{parentName:"p"},"MutableList")," is preferred."))}c.isMDXComponent=!0}}]);